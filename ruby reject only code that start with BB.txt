

class Campaign
def initialize(condition, *qualifiers)
@condition = (condition.to_s + '?').to_sym
@qualifiers = PostCartAmountQualifier ? [] : [] rescue qualifiers.compact
@line_item_selector = qualifiers.last unless @line_item_selector
qualifiers.compact.each do |qualifier|
is_multi_select = qualifier.instance_variable_get(:@conditions).is_a?(Array)
if is_multi_select
qualifier.instance_variable_get(:@conditions).each do |nested_q|
@post_amount_qualifier = nested_q if nested_q.is_a?(PostCartAmountQualifier)
@qualifiers << qualifier
end
else
@post_amount_qualifier = qualifier if qualifier.is_a?(PostCartAmountQualifier)
@qualifiers << qualifier
end
end if @qualifiers.empty?
end

def qualifies?(cart)
return true if @qualifiers.empty?
@unmodified_line_items = cart.line_items.map do |item|
new_item = item.dup
new_item.instance_variables.each do |var|
val = item.instance_variable_get(var)
new_item.instance_variable_set(var, val.dup) if val.respond_to?(:dup)
end
new_item
end if @post_amount_qualifier
@qualifiers.send(@condition) do |qualifier|
is_selector = false
if qualifier.is_a?(Selector) || qualifier.instance_variable_get(:@conditions).any? { |q| q.is_a?(Selector) }
is_selector = true
end rescue nil
if is_selector
raise "Missing line item match type" if @li_match_type.nil?
cart.line_items.send(@li_match_type) { |item| qualifier.match?(item) }
else
qualifier.match?(cart, @line_item_selector)
end
end
end

def run_with_hooks(cart)
before_run(cart) if respond_to?(:before_run)
run(cart)
after_run(cart)
end

def after_run(cart)
@discount.apply_final_discount if @discount && @discount.respond_to?(:apply_final_discount)
revert_changes(cart) unless @post_amount_qualifier.nil? || @post_amount_qualifier.match?(cart)
end

def revert_changes(cart)
cart.instance_variable_set(:@line_items, @unmodified_line_items)
end
end

class ConditionalDiscount < Campaign
def initialize(condition, customer_qualifier, cart_qualifier, line_item_selector, discount, max_discounts)
super(condition, customer_qualifier, cart_qualifier)
@line_item_selector = line_item_selector
@discount = discount
@items_to_discount = max_discounts == 0 ? nil : max_discounts
end

def run(cart)
raise "Campaign requires a discount" unless @discount
return unless qualifies?(cart)
applicable_items = cart.line_items.select { |item| @line_item_selector.nil? || @line_item_selector.match?(item) }
applicable_items = applicable_items.sort_by { |item| item.variant.price }
applicable_items.each do |item|
break if @items_to_discount == 0
if (!@items_to_discount.nil? && item.quantity > @items_to_discount)
discounted_items = item.split(take: @items_to_discount)
@discount.apply(discounted_items)
cart.line_items << discounted_items
@items_to_discount = 0
else
@discount.apply(item)
@items_to_discount -= item.quantity if !@items_to_discount.nil?
end
end
end
end

class Qualifier
def partial_match(match_type, item_info, possible_matches)
match_type = (match_type.to_s + '?').to_sym
if item_info.kind_of?(Array)
possible_matches.any? do |possibility|
item_info.any? do |search|
search.send(match_type, possibility)
end
end
else
possible_matches.any? do |possibility|
item_info.send(match_type, possibility)
end
end
end

def compare_amounts(compare, comparison_type, compare_to)
case comparison_type
when :greater_than
return compare > compare_to
when :greater_than_or_equal
return compare >= compare_to
when :less_than
return compare < compare_to
when :less_than_or_equal
return compare <= compare_to
when :equal_to
return compare == compare_to
else
raise "Invalid comparison type"
end
end
end

class ExcludeDiscountCodes < Qualifier
def initialize(behaviour, message, match_type, discount_codes)
@reject = behaviour == :apply_script
@message = message == "" ? "Discount codes cannot be used with this offer" : message
@match_type = match_type
@discount_codes = discount_codes.map(&:upcase)
end

def match?(cart, selector = nil)
return true if cart.discount_code.nil?
return false if !@reject
discount_code = cart.discount_code.code.upcase
should_reject = true
case @match_type
when :reject_except
should_reject = !@discount_codes.include?(discount_code)
when :accept_except
should_reject = discount_code.start_with?('BB')
end
if should_reject
cart.discount_code.reject({message: @message})
end
return true
end
end

class OrSelector
def initialize(*conditions)
@conditions = conditions.compact
end

def match?(item, selector = nil)
@conditions.any? do |condition|
if selector
condition.match?(item, selector)
else
condition.match?(item)
end
end
end
end

class Selector
def partial_match(match_type, item_info, possible_matches)
match_type = (match_type.to_s + '?').to_sym
if item_info.kind_of?(Array)
possible_matches.any? do |possibility|
item_info.any? do |search|
search.send(match_type, possibility)
end
end
else
possible_matches.any? do |possibility|
item_info.send(match_type, possibility)
end
end
end
end

class LineItemPropertiesSelector < Selector
def initialize(target_properties)
@target_properties = target_properties
end

def match?(line_item)
line_item_props = line_item.properties
@target_properties.all? do |key, value|
next unless line_item_props.has_key?(key)
true if line_item_props[key].downcase == value.downcase
end
end
end

class PercentageDiscount
def initialize(percent, message)
@discount = (100 - percent) / 100.0
@message = message
end

def apply(line_item)
line_item.change_line_price(line_item.line_price * @discount, message: @message)
end
end

class TieredDiscount < Campaign
def initialize(condition, customer_qualifier, cart_qualifier, line_item_selector, discount_type, tier_type, discount_tiers)
super(condition, customer_qualifier, cart_qualifier)
@line_item_selector = line_item_selector
@discount_type = discount_type
@tier_type = tier_type
@discount_tiers = discount_tiers.sort_by {|tier| tier[:discount].to_f }
end

def init_discount(amount, message)
case @discount_type
when :fixed
return FixedTotalDiscount.new(amount, message, :split)
when :percent
return PercentageDiscount.new(amount, message)
when :per_item
return FixedItemDiscount.new(amount, message)
end
end

def run(cart)
return unless qualifies?(cart)

applicable_items = cart.line_items.select { |item| @line_item_selector.nil? || @line_item_selector.match?(item) }
case @tier_type
  when :customer_tag
    return if cart.customer.nil?
    customer_tags = cart.customer.tags.map(&:downcase)
    qualified_tiers = @discount_tiers.select { |tier| customer_tags.include?(tier[:tier].downcase) }
  when :cart_subtotal
    cart_total = cart.subtotal_price
    qualified_tiers = @discount_tiers.select { |tier| cart_total >= Money.new(cents: tier[:tier].to_i * 100) }
  when :discountable_total
    discountable_total = applicable_items.reduce(Money.zero) { |total, item| total + item.line_price }
    qualified_tiers = @discount_tiers.select { |tier| discountable_total >= Money.new(cents: tier[:tier].to_i * 100) }
  when :discountable_total_items
    discountable_quantity = applicable_items.reduce(0) { |total, item| total + item.quantity }
    qualified_tiers = @discount_tiers.select { |tier| discountable_quantity >= tier[:tier].to_i }
  when :cart_items
    cart_quantity = cart.line_items.reduce(0) { |total, item| total + item.quantity }
    qualified_tiers = @discount_tiers.select { |tier| cart_quantity >= tier[:tier].to_i }
end

if @tier_type == :line_quantity
  applicable_items.each do |item|
    qualified_tiers = @discount_tiers.select { |tier| item.quantity >= tier[:tier].to_i }
    next if qualified_tiers.empty?

    discount_amount = qualified_tiers.last[:discount].to_f
    discount_message = qualified_tiers.last[:message]
    discount = init_discount(discount_amount, discount_message)
    discount.apply(item)
    discount.apply_final_discount if discount.respond_to?(:apply_final_discount)
  end
else
  return if qualified_tiers.empty?
  discount_amount = qualified_tiers.last[:discount].to_f
  discount_message = qualified_tiers.last[:message]

  @discount = init_discount(discount_amount, discount_message)
  applicable_items.each { |item| @discount.apply(item) }
end

end
end

class FixedTotalDiscount
def initialize(amount, message, behaviour = :to_zero)
@amount = Money.new(cents: amount * 100)
@message = message
@discount_applied = Money.zero
@all_items = []
@is_split = behaviour == :split
end

def apply(line_item)
if @is_split
@all_items << line_item
else
return unless @discount_applied < @amount
discount_to_apply = [(@amount - @discount_applied), line_item.line_price].min
line_item.change_line_price(line_item.line_price - discount_to_apply, {message: @message})
@discount_applied += discount_to_apply
end
end

def apply_final_discount
return if @all_items.length == 0
total_items = @all_items.length
total_quantity = 0
total_cost = Money.zero
@all_items.each do |item|
total_quantity += item.quantity
total_cost += item.line_price
end
@all_items.each_with_index do |item, index|
discount_percent = item.line_price.cents / total_cost.cents
if total_items == index + 1
discount_to_apply = Money.new(cents: @amount.cents - @discount_applied.cents.floor)
else
discount_to_apply = Money.new(cents: @amount.cents * discount_percent)
end
item.change_line_price(item.line_price - discount_to_apply, {message: @message})
@discount_applied += discount_to_apply
end
end
end

class FixedItemDiscount
def initialize(amount, message)
@amount = Money.new(cents: amount * 100)
@message = message
end

def apply(line_item)
per_item_price = line_item.variant.price
per_item_discount = [(@amount - per_item_price), @amount].max
discount_to_apply = [(per_item_discount * line_item.quantity), line_item.line_price].min
line_item.change_line_price(line_item.line_price - discount_to_apply, {message: @message})
end
end

class VariantIdSelector < Selector
def initialize(match_type, variant_ids)
@invert = match_type == :not_one
@variant_ids = variant_ids.map { |id| id.to_i }
end

def match?(line_item)
@invert ^ @variant_ids.include?(line_item.variant.id)
end
end

class QuantityLimit < Campaign
def initialize(condition, customer_qualifier, cart_qualifier, line_item_selector, limit_by, limit)
super(condition, customer_qualifier, cart_qualifier)
@limit_by = limit_by
@line_item_selector = line_item_selector
@per_item_limit = limit
end

def run(cart)
return unless qualifies?(cart)
item_limits = {}
to_delete = []
if @per_item_limit == 0
cart.line_items.delete_if { |item| @line_item_selector.nil? || @line_item_selector.match?(item) }
else
cart.line_items.each_with_index do |item, index|
next unless @line_item_selector.nil? || @line_item_selector.match?(item)
key = nil
case @limit_by
when :product
key = item.variant.product.id
when :variant
key = item.variant.id
when :cart
key = 1
end

    if key
      item_limits[key] = @per_item_limit if !item_limits.has_key?(key)
      needs_limiting = true if item.quantity > item_limits[key]
      needs_deleted = true if item_limits[key] <= 0
      max_amount = item.quantity - item_limits[key]
      item_limits[key] -= needs_limiting ? max_amount : item.quantity
    else
      needs_limiting = true if item.quantity > @per_item_limit
      max_amount = item.quantity - @per_item_limit
    end

    if needs_limiting
      if needs_deleted
        to_delete << index
      else
        item.split(take: max_amount)
      end
    end
  end

  if to_delete.length > 0
    del_index = -1
    cart.line_items.delete_if do |item|
      del_index += 1
      true if to_delete.include?(del_index)
    end
  end

end

end
end

class CartQuantityQualifier < Qualifier
def initialize(total_method, comparison_type, quantity)
@total_method = total_method
@comparison_type = comparison_type
@quantity = quantity
end

def match?(cart, selector = nil)
case @total_method
when :item
total = cart.line_items.reduce(0) do |total, item|
total + ((selector ? selector.match?(item) : true) ? item.quantity : 0)
end
when :cart
total = cart.line_items.reduce(0) { |total, item| total + item.quantity }
end
if @total_method == :line_any || @total_method == :line_all
method = @total_method == :line_any ? :any? : :all?
qualified_items = cart.line_items.select { |item| selector ? selector.match?(item) : true }
qualified_items.send(method) { |item| compare_amounts(item.quantity, @comparison_type, @quantity) }
else
compare_amounts(total, @comparison_type, @quantity)
end
end
end

class AndSelector
def initialize(*conditions)
@conditions = conditions.compact
end

def match?(item, selector = nil)
@conditions.all? do |condition|
if selector
condition.match?(item, selector)
else
condition.match?(item)
end
end
end
end

class SubscriptionItemSelector < Selector
def initialize(match_type)
@invert = match_type == :not
end

def match?(line_item)
@invert ^ !line_item.selling_plan_id.nil?
end
end

class ProductIdSelector < Selector
def initialize(match_type, product_ids)
@invert = match_type == :not_one
@product_ids = product_ids.map { |id| id.to_i }
end

def match?(line_item)
@invert ^ @product_ids.include?(line_item.variant.product.id)
end
end

CAMPAIGNS = [
ConditionalDiscount.new(
:all,
nil,
ExcludeDiscountCodes.new(
:apply_script,
"Discount codes cannot be used with this offer",
:accept_except,
["BB-MG2TZ0JTIBYE"]
),
OrSelector.new(
LineItemPropertiesSelector.new(
{"_widget_id" => "27158"}
),
LineItemPropertiesSelector.new(
{"_widget_id" => "14244"}
),
nil
),
PercentageDiscount.new(
30,
"30% Off"
),
0
),
TieredDiscount.new(
:all,
nil,
nil,
VariantIdSelector.new(
:is_one,
["31977903358084", "31977900343428", "31977901097092", "31977901981828", "31977945038980", "31977903358084"]
),
:percent,
:line_quantity,
[{:tier => "2", :discount => "10", :message => "10% off for 2+"},	{:tier => "4", :discount => "20", :message => "20$ off for 4+"}]
),
TieredDiscount.new(
:all,
nil,
nil,
VariantIdSelector.new(
:is_one,
["31977917186180", "31977904504964"]
),
:percent,
:line_quantity,
[{:tier => "2", :discount => "13.7", :message => "10% off for 2+"},	{:tier => "4", :discount => "26.2", :message => "20% off for 4+"}]
),
QuantityLimit.new(
:all,
nil,
CartQuantityQualifier.new(
:cart,
:greater_than,
10
),
nil,
:cart,
10
),
ConditionalDiscount.new(
:all,
nil,
ExcludeDiscountCodes.new(
:apply_discount,
"",
:reject_except,
["BB"]
),
AndSelector.new(
SubscriptionItemSelector.new(
:not
),
ProductIdSelector.new(
:not_one,
["4514333425796"]
),
nil
),
PercentageDiscount.new(
40,
"40% Off Sitewide"
),
10
),
ConditionalDiscount.new(
:all,
nil,
nil,
AndSelector.new(
SubscriptionItemSelector.new(
:not
),
ProductIdSelector.new(
:is_one,
["6646518087812", "5143974412420"]
),
nil
),
PercentageDiscount.new(
20,
"20% Off "
),
10
)
].freeze

CAMPAIGNS.each do |campaign|
campaign.run_with_hooks(Input.cart)
end

Output.cart = Input.cart
